#+title: Doom Emacs Config
#+author: Benjamin Schichtholz
#+email: schichtholz@mailbox.org
#+PROPERTY: header-args :tangle config.el

* Basic Configuration
** Locale
Spell checker configuration
#+begin_src emacs-lisp
  (setq ispell-dictionary "german")
#+end_src

Starting day of week in calendar
#+begin_src emacs-lisp
  (setq calendar-week-start-day 1)
#+end_src

Rename outline from org-beamer to german title
#+begin_src emacs-lisp
  (setq org-beamer-outline-frame-title "Gliederung")
#+end_src
** User Credentials
Functionality for identifying user

#+begin_src emacs-lisp
  (setq user-full-name "Benjamin Schichtholz"
      user-mail-address "schichtholz@mailbox.org")
#+end_src
** Font
Doom monospace and variable pitch font
#+begin_src emacs-lisp
  (setq doom-font (font-spec :family "Inconsolata" :size 21 :weight 'regular)
        doom-variable-pitch-font (font-spec :family "Source Sans Pro" :style "Regular" :size 21 :weight 'regular))
#+end_src
Add hook to set italic font
#+begin_src emacs-lisp
  (add-hook 'text-mode-hook
            (lambda() (set-face-attribute 'italic nil :family "Liberation Mono" :height 0.9 :width 'condensed :slant 'italic)
  ))
#+end_src
** Theme
A list of the preferred doom themes. The current selection is uncommented.
#+begin_src emacs-lisp
  ;;(setq doom-theme 'doom-monokai-spectrum)
  ;;(setq doom-theme 'doom-Iosvkem)
  ;;(setq doom-theme 'doom-peacock)
  ;;(setq doom-theme 'doom-material-dark)
  (setq doom-theme 'doom-old-hope)
#+end_src
** Editor
Set line numbers, spacing and tab width
#+begin_src emacs-lisp
  (setq display-line-numbers-type 'relative)
  (setq-default tab-width 2)
  (setq line-spacing 0.2)
#+end_src

* Org
Configure org directory and hide markers for text configuration
#+begin_src emacs-lisp
  (setq org-directory "~/Documents/Org/")
  (setq org-hide-emphasis-markers t)
#+end_src

Use fancy bullets
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (org-superstar-mode 1)))
#+end_src

Larger font for headings
#+begin_src emacs-lisp
  (custom-set-faces
    '(org-level-1 ((t (:inherit outline-1 :height 1.3))))
    '(org-level-2 ((t (:inherit outline-2 :height 1.2))))
    '(org-level-3 ((t (:inherit outline-3 :height 1.1))))
    '(org-level-4 ((t (:inherit outline-4 :height 1.0))))
    '(org-level-5 ((t (:inherit outline-5 :height 1.0))))
  )
#+end_src

* File-specific Modes
:PROPERTIES:
:ID:       273cf0cc-3c65-484a-a3e6-f6fc6342a384
:END:
Modes based on file name
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.http\\'" . restclient-mode))
  (add-to-list 'auto-mode-alist '("\\rc\\'" . conf-mode))
  (add-to-list 'auto-minor-mode-alist '("android-stack.png" . hide-mode-line-mode))
#+end_src

* Keybindings
Custom keybindings
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x x") 'kill-this-buffer)
  (map! :leader
        :desc "Launch Eshell"
        "o E" #'eshell)
  (map! :leader
        :desc "Launch Shell"
        "s h" #'shell)
  (map! :leader
        :desc "Export latex beamer to pdf"
        "l b" #'org-beamer-export-to-pdf)
  (map! :leader
        :desc "Hide Modeline"
        "m h" #'hide-mode-line-mode)
#+end_src
* Doom
** Splash Screen
Custom image for splash screen
#+begin_src emacs-lisp
  (setq fancy-splash-image "~/Pictures/logos/black-hole-doom.png")
#+end_src

** Modeline
Modeline settings
#+begin_src emacs-lisp
  (setq doom-modeline-bar-width 7)
  (setq doom-modeline-height 40)
  (setq doom-modeline-major-mode-icon t)
  (setq doom-modeline-major-mode-color-icon t)
  (setq doom-modeline-buffer-modification-icon t)
  (setq doom-modeline-height 1)
  (setq doom-modeline-modal-icon t)
  (setq doom-modeline-enable-word-count t)
#+end_src

Modeline structure
#+begin_src emacs-lisp
  (after! doom-modeline
    (doom-modeline-def-modeline 'main
    '(bar matches buffer-info remote-host buffer-position parrot selection-info)
    '(misc-info minor-modes checker input-method buffer-encoding major-mode process vcs "  "))) ; <-- added padding here
  (setq
    all-the-icons-scale-factor 1.1)
#+end_src

* Shells
** Eshell
Configure colors and prompt in eshell
#+begin_src emacs-lisp
  (setq
  eshell-prompt-function (lambda nil
      (concat
      (propertize (eshell/pwd) 'face `(:foreground "#67e2e9"))
      (propertize " $ " 'face `(:foreground "#67ff7b"))))
    eshell-highlight-prompt nil
    eshell-banner-message
          '(format "%s %s\n"
          (propertize (format " %s " (string-trim (buffer-name)))
                  'face 'mode-line-highlight)
          (propertize (current-time-string)
          'face 'font-lock-keyword-face))
  )
#+end_src
** Shell
Bash as default shell
#+begin_src emacs-lisp
  (setq shell-file-name "/bin/bash")
#+end_src
* Mail
** Setup
#+begin_src emacs-lisp
  (require 'mu4e)
#+end_src
** Contexts
Mailbox context
#+begin_src emacs-lisp
  (setq mu4e-contexts
        `(,(make-mu4e-context
            :name "mailbox"
            :match-func (lambda (msg)
                          (when msg
                            (string-prefix-p "/Mailbox" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "schichtholz@mailbox.org")
                    (mu4e-trash-folder . "/Mailbox/Trash")
                    (mu4e-refile-folder . "/Mailbox/Archive")
                    (mu4e-sent-folder . "/Mailbox/Sent")
                    (mu4e-drafts-folder . "/Mailbox/Drafts"))),

        (make-mu4e-context
            :name "kit"
            :match-func (lambda (msg)
                            (when msg
                            (string-prefix-p "/KIT" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "benjamin.schichtholz@student.kit.edu")
                    (mu4e-trash-folder . "/KIT/Gel&APY-schte Elemente")
                    (mu4e-refile-folder . "/KIT/Journal")
                    (mu4e-sent-folder . "/KIT/Gesendete Elemente")
                    (mu4e-drafts-folder . "/KIT/Entw&APw-rfe")))))
  #+end_src
** Fetch new Mail
Command for retrieving new emails
#+begin_src emacs-lisp
  (setq mu4e-get-mail-command "mbsync -a")
#+end_src

Update interval
#+begin_src emacs-lisp
  (setq mu4e-update-interval 300)
#+end_src
** Compose
Message Signature
#+begin_src emacs-lisp
  (setq mu4e-compose-signature "Mit freundlichen Grüßen,\nBenjamin Schichtholz")
#+end_src
